" vi: foldmethod=marker foldlevel=0

set ttyfast

if !exists('g:not_finish_vimplug')
  " colorscheme molokai
  if has("gui_running")
    set background=dark
    " colorscheme solarized
    colorscheme blame
    " set background=dark
  else
    " colorscheme molokai
    set background=dark
    " colorscheme gruvbox
    set termguicolors
    colorscheme blame
    " set background=dark
  endif
endif

if has("gui_running")
  if has("gui_mac") || has("gui_macvim")
    set guifont=Menlo:h12
    set transparency=7
  elseif has("gui_gtk2") || has("gui_gtk3")
    set guifont=Source\ Code\ Pro\ 16
  endif

  autocmd GuiEnter * silent exec "!transset -a 0.86"
else
  let g:CSApprox_loaded = 1

  " IndentLine
  let g:indentLine_enabled = 1
  let g:indentLine_concealcursor = 0
  let g:indentLine_char = 'â”†'
  let g:indentLine_faster = 1

  if $COLORTERM == 'gnome-terminal'
    set term=gnome-256color
  else
    if $TERM == 'xterm'
      set term=xterm-256color
    endif
  endif
endif


if &term =~ '256color'
  set t_ut=
endif

" vim-airline
let g:airline_theme = 'bubblegum'
let g:airline_powerline_fonts=1

" autocmd vimenter * NERDTreeClose
let loaded_nerd_tree=1

"" clang_autocomplete options
set conceallevel=2
set concealcursor=vin
let g:clang_use_library=1
"" let g:clang_library_path='/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'
let g:clang_library_path='/usr/lib/llvm-5.0/lib/libclang.so.1'
let g:clang_complete_auto=1
let g:clang_periodic_quickfix=1
let g:clang_snippets=1
let g:clang_conceal_snippets=1
let g:clang_snippets_engine='clang_complete'
" Show clang errors in the quickfix window
"let g:clang_complete_copen = 1
set completeopt=longest,menuone,preview

"" Multiple Cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-S-m>'
" let g:multi_cursor_skip_key='<S-C-LeftMouse>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_start_key='<C-m>'
let g:multi_cursor_start_word_key='g<C-m>'

"" SuperTab
let g:SuperTabDefaultCompletionType="context"
let g:SuperTabContextDefaultCompletionType="<c-p>"
let g:SuperTabRetainCompletionDuration='completion'
let g:SuperTabClosePreviewOnPopupClose=1

function MyTagContext()
    if filereadable(expand('%:p:h') . '/GGTAGS')
        return "\<c-x>\<c-]>"
    endif
    " no return will result in the evaluation of the next
    " configured context.
endfunction

let g:SuperTabCompletionContexts = ['MyTagContext', 's:ContextText', 's:ContextDiscover']

autocmd FileType *
            \ if &omnifunc != '' |
            \   call SuperTabChain(&omnifunc, "<c-p>") |
            \ endif

"" Tab - Visually indent regions of code
"nnoremap <Tab> >>
"nnoremap <S-Tab> <<
"inoremap <S-Tab> <C-D>
"vnoremap <Tab> >gv
"vnoremap <S-Tab> <gv

" c
"autocmd FileType c setlocal tabstop=2 shiftwidth=2 expandtab
"autocmd FileType h setlocal tabstop=2 shiftwidth=2 expandtab
autocmd FileType c setlocal tabstop=4 shiftwidth=4
autocmd FileType h setlocal tabstop=4 shiftwidth=4
autocmd FileType cpp setlocal tabstop=2 shiftwidth=2
autocmd FileType hpp setlocal tabstop=2 shiftwidth=2

" javascript
let g:javascript_enable_domhtmlcss = 1

" vim-javascript
augroup vimrc-javascript
  autocmd!
  autocmd FileType javascript set tabstop=4|set shiftwidth=4|set expandtab softtabstop=4
augroup END

" syntastic
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_python_checkers=['python', 'flake8']
let g:syntastic_c_checkers=['clang_check']
let g:syntastic_c_clang_check_exec='/usr/bin/clang-check-5.0'
let g:syntastic_c_clang_check_post_args=""
let g:syntastic_cpp_checkers=['clang_check']
let g:syntastic_cpp_clang_check_exec='/usr/bin/clang-check-5.0'
let g:syntastic_cpp_clang_check_post_args=""

"" python provider
" let g:python3_host_prog = '/opt/anaconda3/bin/python3.7'
let g:python_host_prog = '/usr/bin/python2.7'

" Keep cursor in the middle {{{
set scrolloff=9999
" }}}
" Enable mouse suport {{{
set mouse=a
" }}}
" Show 80 column {{{
set colorcolumn=+1
" }}}
" Split in CORRECT places {{{
set splitright splitbelow
" }}}
" Permanent undo {{{
set undofile
" }}}
" Smart `0` {{{
" `0` goes to the beginning of the text on first press and to the beginning
" of the line on second press. It alternates afterwards.
nnoremap <expr> 0 virtcol('.') - 1 <= indent('.') && col('.') > 1 ? '0' : '_'
" }}}
" Folding {{{
set foldmethod=syntax
set foldlevel=999

nnoremap <expr> <CR> foldlevel('.') ? 'za' : "\<CR>"
" }}}
" Format {{{
command! Clean keeppatterns %s/\s\+$//e | set nohlsearch
" }}}
" Custom bindings {{{
" Browse airline tabs
:nnoremap <C-p> :bnext<CR>
:nnoremap <C-o> :bprevious<CR>

" Comment block
vnoremap <silent> <C-k> :Commentary<cr>
vnoremap <silent> <C-_> :Commentary<cr>

" Select all
map <C-a> <esc>ggVG<CR>
" }}}
